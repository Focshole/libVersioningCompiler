# Copyright 2017 Politecnico di Milano.
# Developed by : Stefano Cherubin, Davide Gadioli
#                PhD student, Politecnico di Milano
#                <first_name>.<family_name>@polimi.it
#                Moreno Giussani
#                Ms student, Politecnico di Milano
#                <first_name>.<family_name>@mail.polimi.it
#
# This file is part of libVersioningCompiler
#
# libVersioningCompiler is free software: you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation, either version 3
# of the License, or (at your option) any later version.
#
# libVersioningCompiler is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with libVersioningCompiler. If not, see <http://www.gnu.org/licenses/>

# - Check for the presence of libVersioningCompiler
#
# The following variables are set when libVersioningCompiler is found:
#  LIBVC_FOUND       = Set to true, if all components of libVersioningCompiler
#                          have been found.
#  LIBVC_INCLUDE_DIRS   = Include path for the header files of libVersioningCompiler
#  LIBVC_LIBRARIES  = Link these libraries to use libVersioningCompiler
#  LIVC_LIB_DIR     = Extra libraries directories
#  HAVE_CLANG_LIB_COMPILER = Set to true if libVersioningCompiler can have
#                                 Clang as a library enabled

# -----------------------------------------------------------------------------
# Check for the header files

set(LIBVC_SOURCE_PATH @PROJECT_SOURCE_DIR@)
set(LIBVC_BINARY_PATH @PROJECT_BINARY_DIR@)
set(LIBVC_INSTALL_PATH @CMAKE_INSTALL_PREFIX@)

# check for the header of the monitor module
find_path(
  LIBVC_INCLUDE_DIRS versioningCompiler/Version.hpp
  PATHS ${LIBVC_INSTALL_PATH}/include ${LIBVC_SOURCE_PATH}/include
        /usr/local/include /usr/include ${CMAKE_EXTRA_INCLUDES}
  NO_DEFAULT_PATH)

if(LIBVC_INCLUDE_DIRS-NOTFOUND)
  set(LIBVC_FOUND FALSE)
  if(LibVersioningCompiler_FIND_REQUIRED)
    message(FATAL_ERROR "Could not find libVersioningCompiler")
  endif(LibVersioningCompiler_FIND_REQUIRED)
endif(LIBVC_INCLUDE_DIRS-NOTFOUND)

# Check for Clang-as-a-library implementation is installed
find_file(
  CLANG_LIB_COMPILER_INCLUDE_PATH
  versioningCompiler/CompilerImpl/ClangLibCompiler.hpp
  PATHS ${LIBVC_INCLUDE_DIRS}
  NO_DEFAULT_PATH)

if(CLANG_LIB_COMPILER_INCLUDE_PATH-NOTFOUND)
  set(HAVE_CLANG_LIB_COMPILER FALSE)
else(CLANG_LIB_COMPILER_INCLUDE_PATH-NOTFOUND)
  set(HAVE_CLANG_LIB_COMPILER TRUE)
endif(CLANG_LIB_COMPILER_INCLUDE_PATH-NOTFOUND)

# -----------------------------------------------------------------------------
# Check for DEPENDENCIES headers

# -----------------------------------------------------------------------------
# check for DL library

if(NOT APPLE AND NOT CMAKE_DL_LIBS)
  set(LIBVC_FOUND FALSE)
  if(LibVersioningCompiler_FIND_REQUIRED)
    message(
      FATAL_ERROR "Could not find libVersioningCompiler required dependency DL")
  endif(LibVersioningCompiler_FIND_REQUIRED)
endif(NOT APPLE AND NOT CMAKE_DL_LIBS)

# -----------------------------------------------------------------------------
# Check for UUID includes

set(UUID_ROOT $ENV{UUID_ROOT})

if(APPLE)
  set(UUID_LIBRARY_VAR System)
else(APPLE)
  # Linux type:
  set(UUID_LIBRARY_VAR uuid)
endif(APPLE)

find_path(
  UUID_INCLUDE_DIR uuid/uuid.h
  PATHS ${UUID_ROOT}/lib
  NO_DEFAULT_PATH)

if(NOT UUID_INCLUDE_DIR)
  find_path(UUID_INCLUDE_DIR uuid/uuid.h /usr/local/include /usr/include)
endif(NOT UUID_INCLUDE_DIR)

if(UUID_INCLUDE_DIR-NOTFOUND)
  set(LIBVC_FOUND FALSE)
  if(LibVersioningCompiler_FIND_REQUIRED)
    message(
      FATAL_ERROR
        "Could not find libVersioningCompiler required dependency UUID")
  endif(LibVersioningCompiler_FIND_REQUIRED)
endif(UUID_INCLUDE_DIR-NOTFOUND)

# -----------------------------------------------------------------------------
# Find the native LLVM includes and library and get the configuration parameters
#
#  LLVM_FOUND           - system has LLVM installed
#  LLVM_PACKAGE_VERSION - LLVM version
#  LLVM_VERSION_MAJOR   - LLVM major release number
#  LLVM_INCLUDE_DIR     - where to find llvm include files
#  LLVM_LIBRARY_DIR     - where to find llvm libs
#  LLVM_CFLAGS          - llvm compiler flags
#  LLVM_LFLAGS          - llvm linker flags
#  LLVM_MODULE_LIBS     - list of llvm libs for working with modules.
#  LLVM_PACKAGE_VERSION     - Installed version.
#  LLVM_TOOLS_BINARY_DIR    - Where to find llvm-* programs

if(NOT LLVM_FOUND)
  set(LLVM_KNOWN_MAJOR_VERSIONS
      15
      14
      13
      12
      11
      10
      9
      8
      7
      6.0
      5.0
      4.0
      3.9
      3.8)
  foreach(ver ${LLVM_KNOWN_MAJOR_VERSIONS})
    find_package(LLVM ${ver} QUIET)
    if(LLVM_FOUND)
      # Call the main findLLVM.cmake to check LLVM setup and set some flags such as:
      #   LLVM_LIBRARY_DIR, LLVM_INCLUDE_DIR, LLVM_TOOLS_BINARY_DIR, LLVM_VERSION_MAJOR, LLVM_PACKAGE_VERSION
      if(LLVM_FIND_VERBOSE)
        find_package(LLVM ${ver} CONFIG)
      else(LLVM_FIND_VERBOSE)
        find_package(LLVM ${ver} CONFIG QUIET)
      endif(LLVM_FIND_VERBOSE)
      break()
    endif(LLVM_FOUND)
  endforeach(ver ${LLVM_KNOWN_VERSIONS})
endif(NOT LLVM_FOUND)

if(NOT LLVM_CONFIG_EXECUTABLE)
  find_program(
    LLVM_CONFIG_EXECUTABLE
    NAMES "llvm-config-${LLVM_VERSION_MAJOR}" "llvm-config"
    DOC "llvm-config executable"
    PATHS ${LLVM_TOOLS_BINARY_DIR}
    NO_DEFAULT_PATH)
endif(NOT LLVM_CONFIG_EXECUTABLE)

if(LLVM_CONFIG_EXECUTABLE)
  message(STATUS "llvm-config ........ = ${LLVM_CONFIG_EXECUTABLE}")
else(LLVM_CONFIG_EXECUTABLE)
  message(STATUS "llvm-config ........ = NOT FOUND")
  message(WARNING "Could NOT find LLVM config executable")
endif(LLVM_CONFIG_EXECUTABLE)

if(NOT LLVM_SHARED_MODE)
  execute_process(
    COMMAND ${LLVM_CONFIG_EXECUTABLE} --shared-mode
    OUTPUT_VARIABLE LLVM_SHARED_MODE
    OUTPUT_STRIP_TRAILING_WHITESPACE)
endif(NOT LLVM_SHARED_MODE)

if(LLVM_SHARED_MODE STREQUAL "shared")
  execute_process(
    COMMAND ${LLVM_CONFIG_EXECUTABLE} --link-shared
    OUTPUT_VARIABLE LLVM_LINK_SHARED_OUTPUT
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  if(LLVM_LINK_SHARED_OUTPUT STREQUAL "")
    message(STATUS "Setting link mode to shared...= OK")
  else(LLVM_LINK_SHARED_OUTPUT STREQUAL "")
    message(
      WARNING "Setting link mode to shared... = ${LLVM_LINK_SHARED_OUTPUT}")
  endif(LLVM_LINK_SHARED_OUTPUT STREQUAL "")
endif(LLVM_SHARED_MODE STREQUAL "shared")

if(LLVM_SHARED_MODE STREQUAL "static")
  execute_process(
    COMMAND ${LLVM_CONFIG_EXECUTABLE} --link-static
    OUTPUT_VARIABLE LLVM_LINK_STATIC_OUTPUT
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  if(LLVM_LINK_STATIC_OUTPUT STREQUAL "")
    message(STATUS "Setting link mode to static...= OK")
  else(LLVM_LINK_STATIC_OUTPUT STREQUAL "")
    message(
      WARNING "Setting link mode to static... = ${LLVM_LINK_STATIC_OUTPUT}")
  endif(LLVM_LINK_STATIC_OUTPUT STREQUAL "")
endif(LLVM_SHARED_MODE STREQUAL "static")

if(NOT LLVM_CFLAGS)
  execute_process(
    COMMAND ${LLVM_CONFIG_EXECUTABLE} --cxxflags
    OUTPUT_VARIABLE LLVM_CFLAGS
    OUTPUT_STRIP_TRAILING_WHITESPACE)
endif(NOT LLVM_CFLAGS)

if(NOT LLVM_LFLAGS)
  execute_process(
    COMMAND ${LLVM_CONFIG_EXECUTABLE} --ldflags
    OUTPUT_VARIABLE LLVM_LFLAGS
    OUTPUT_STRIP_TRAILING_WHITESPACE)
endif(NOT LLVM_LFLAGS)

if(NOT LLVM_MODULE_LIBS)
  execute_process(
    COMMAND ${LLVM_CONFIG_EXECUTABLE} --libs
    OUTPUT_VARIABLE LLVM_MODULE_LIBS
    OUTPUT_STRIP_TRAILING_WHITESPACE)
endif(NOT LLVM_MODULE_LIBS)

if(NOT LLVM_MODULE_LIBFILES)
  execute_process(
    COMMAND ${LLVM_CONFIG_EXECUTABLE} --libfiles
    OUTPUT_VARIABLE LLVM_MODULE_LIBFILES
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  separate_arguments(LLVM_MODULE_LIBFILES)
endif(NOT LLVM_MODULE_LIBFILES)

if(NOT LLVM_SYSTEM)
  execute_process(
    COMMAND ${LLVM_CONFIG_EXECUTABLE} --system-libs
    OUTPUT_VARIABLE LLVM_SYSTEM
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  separate_arguments(LLVM_SYSTEM)
endif(NOT LLVM_SYSTEM)
# This should never happen
if(NOT LLVM_TOOLS_BINARY_DIR)
  execute_process(
    COMMAND ${LLVM_CONFIG_EXECUTABLE} --bindir
    OUTPUT_VARIABLE LLVM_TOOLS_BINARY_DIR
    OUTPUT_STRIP_TRAILING_WHITESPACE)
endif(NOT LLVM_TOOLS_BINARY_DIR)

if(NOT CLANG_EXE_NAME)
  find_program(
    CLANG_EXE_FULLPATH
    NAMES "clang-${LLVM_VERSION_MAJOR}" "clang"
    DOC "clang executable"
    PATHS ${LLVM_TOOLS_BINARY_DIR}
    NO_DEFAULT_PATH)
  get_filename_component(CLANG_EXE_NAME ${CLANG_EXE_FULLPATH} NAME)
endif(NOT CLANG_EXE_NAME)
if(NOT OPT_EXE_NAME)
  find_program(
    OPT_EXE_FULLPATH
    NAMES "opt-${LLVM_VERSION_MAJOR}" "opt"
    DOC "opt executable"
    PATHS ${LLVM_TOOLS_BINARY_DIR}
    NO_DEFAULT_PATH)
  get_filename_component(OPT_EXE_NAME ${OPT_EXE_FULLPATH} NAME)
endif(NOT OPT_EXE_NAME)
# -----------------------------------------------------------------------------
# Check LLVM version

set(LLVM_VERSION_MIN_REQUIRED "13.0.0")

if(LLVM_FOUND
   AND (NOT (LLVM_PACKAGE_VERSION VERSION_LESS LLVM_VERSION_MIN_REQUIRED))
   AND LIBCLANG_FOUND)
  set(ENABLE_CLANG_AS_LIB TRUE)
  if(NOT HAVE_CLANG_LIB_COMPILER AND LibVersioningCompiler_FIND_VERBOSE)
    message(WARNING "Clang-as-a-library can be enabled\
 however it is not installed.\n\
 Please re-install libVersioningCompiler to enable it")
  endif(NOT HAVE_CLANG_LIB_COMPILER AND LibVersioningCompiler_FIND_VERBOSE)
else()
  set(ENABLE_CLANG_AS_LIB FALSE)
  if(LibVersioningCompiler_FIND_VERBOSE)
    if(NOT LLVM_FOUND)
      message(WARNING "LLVM not detected")
    else(NOT LLVM_FOUND)
      if(LLVM_PACKAGE_VERSION VERSION_LESS LLVM_VERSION_MIN_REQUIRED)
        message(WARNING "You are using an obsolete version of LLVM:\
  \n\t${LLVM_PACKAGE_VERSION} detected.\t\
  Minimum required is ${LLVM_VERSION_MIN_REQUIRED}")
      else(LLVM_PACKAGE_VERSION VERSION_LESS LLVM_VERSION_MIN_REQUIRED)
        message(WARNING "LibClang not detected")
      endif(LLVM_PACKAGE_VERSION VERSION_LESS LLVM_VERSION_MIN_REQUIRED)
    endif(NOT LLVM_FOUND)
    message(WARNING "Clang-as-a-library disabled")
  endif(LibVersioningCompiler_FIND_VERBOSE)
endif()

# -----------------------------------------------------------------------------
# Try to find libclang
#
# Once done this will define:
# - LIBCLANG_FOUND
#               System has libclang.
# - LIBCLANG_INCLUDE_DIRS
#               The libclang include directories.
# - LIBCLANG_LIBRARIES
#               The libraries needed to use libclang.
# - LIBCLANG_LIBRARY_DIR
#               The path to the directory containing libclang.
# - LIBCLANG_KNOWN_LLVM_VERSIONS
#               Known LLVM release numbers.

find_path(
  LIBCLANG_INCLUDE_DIRS clang-c/Index.h
  PATHS ${LLVM_INCLUDE_DIR}
  NO_DEFAULT_PATH
  PATH_SUFFIXES LLVM/include #Windows package from http://llvm.org/releases/
  DOC "The path to the directory that contains clang-c/Index.h")

if(LIBCLANG_INCLUDE_DIRS)
  set(LIBCLANG_FOUND TRUE)
else(LIBCLANG_INCLUDE_DIRS)
  set(LIBCLANG_FOUND FALSE)
endif(LIBCLANG_INCLUDE_DIRS)

# Find libclang library

# On Windows with MSVC, the import library uses the ".imp" file extension
# instead of the common ".lib"
if(MSVC)
  find_file(
    LIBCLANG_LIBRARY libclang.imp libclang.lib libclang.dll
    PATH_SUFFIXES LLVM/lib
    DOC "The file that corresponds to the libclang library.")
else(MSVC)
  if(LLVM_SHARED_MODE STREQUAL "shared")
    find_library(
      LIBCLANG_LIBRARY
      NAMES libclang clang
      PATHS ${LLVM_LIBRARY_DIR}
      NO_DEFAULT_PATH
      DOC "The file that corresponds to the libclang library.")
  else(LLVM_SHARED_MODE STREQUAL "shared")
    # Look for libclang library, giving higher priority to statically linked libraries (.a,.lib)
    find_library(
      LIBCLANG_LIBRARY
      NAMES libclang.a libclang.lib libclang.imp libclang clang
      PATHS ${LLVM_LIBRARY_DIR}
      NO_DEFAULT_PATH
      DOC "The file that corresponds to the libclang library.")
  endif(LLVM_SHARED_MODE STREQUAL "shared")
endif(MSVC)
set(LIBCLANG_LIBRARIES ${LIBCLANG_LIBRARY} ${LIBCLANG_LIBRARIES})
if(NOT LIBCLANG_LIBRARY)
  message(STATUS "LibClang library ... = NOT FOUND")
else()
  message(STATUS "LibClang library ... = ${LIBCLANG_LIBRARY}")
endif()

# Make variable coherent
if(HAVE_CLANG_LIB_COMPILER AND NOT ENABLE_CLANG_AS_LIB)
  set(HAVE_CLANG_LIB_COMPILER FALSE)
endif(HAVE_CLANG_LIB_COMPILER AND NOT ENABLE_CLANG_AS_LIB)
if(ENABLE_CLANG_AS_LIB AND NOT HAVE_CLANG_LIB_COMPILER)
  set(ENABLE_CLANG_AS_LIB FALSE)
endif(ENABLE_CLANG_AS_LIB AND NOT HAVE_CLANG_LIB_COMPILER)

# -----------------------------------------------------------------------------
# compose the real list of paths

set(LIBVC_INCLUDE_DIRS ${LIBVC_INCLUDE_DIRS} ${UUID_INCLUDE_DIR})

if(ENABLE_CLANG_AS_LIB)
  set(LIBVC_INCLUDE_DIRS ${LIBVC_INCLUDE_DIRS} ${LLVM_INCLUDE_DIR}
                         ${LIBCLANG_INCLUDE_DIRS})
endif(ENABLE_CLANG_AS_LIB)

list(REMOVE_DUPLICATES LIBVC_INCLUDE_DIRS)

# -----------------------------------------------------------------------------
# Check for the uuid library

find_library(
  UUID_LIBRARY
  NAMES ${UUID_LIBRARY_VAR}
  PATHS ${UUID_ROOT}/lib
  NO_DEFAULT_PATH)

if(NOT UUID_LIBRARY)
  find_library(
    UUID_LIBRARY
    NAMES ${UUID_LIBRARY_VAR}
    PATHS /lib /usr/lib /usr/local/lib)
endif(NOT UUID_LIBRARY)

get_filename_component(UUID_LIBRARY_DIR ${UUID_LIBRARY} PATH)

# Libtool
if(USE_LIBTOOL)
  if(NOT Libtool_INCLUDE_DIR)
    find_path(
      Libtool_INCLUDE_DIR ltdl.h
      PATHS /usr/include /usr/local/include /opt/local/include
            /opt/homebrew/usr/include
      NO_DEFAULT_PATH)
  endif(NOT Libtool_INCLUDE_DIR)

  if(NOT Libtool_LIBRARY)
    find_library(
      Libtool_LIBRARY
      NAMES ltdl
      PATHS /usr/lib /usr/local/lib /sw/lib /opt/local/lib /opt/homebrew/usr/lib
      NO_DEFAULT_PATH)
  endif(NOT Libtool_LIBRARY)
  if(Libtool_INCLUDE_DIR AND Libtool_LIBRARY)
    message(STATUS "Libtool found: ${Libtool_INCLUDE_DIR} ${Libtool_LIBRARY}")
  else(Libtool_INCLUDE_DIR AND Libtool_LIBRARY)
    message(
      FATAL_ERROR "Libtool not found: ${Libtool_INCLUDE_DIR} ${Libtool_LIBRARY}"
    )
  endif(Libtool_INCLUDE_DIR AND Libtool_LIBRARY)
endif(USE_LIBTOOL)

# -----------------------------------------------------------------------------
# check for the libVersioningCompiler library
find_library(
  LIBVC_LIBRARY VersioningCompiler
  PATHS ${LIBVC_INSTALL_PATH}/lib ${LIBVC_BINARY_PATH} /usr/local/lib /usr/lib
        /lib ${CMAKE_EXTRA_LIBRARIES}
  NO_DEFAULT_PATH)

get_filename_component(LIBVC_LIBRARY_DIR ${LIBVC_LIBRARY} PATH)

set(LIBVC_LIBRARIES ${LIBVC_LIBRARY} ${UUID_LIBRARY} ${CMAKE_DL_LIBS})

set(LIVC_LIB_DIR ${LIBVC_LIBRARY_DIR} ${UUID_LIBRARY_DIR})

if(ENABLE_CLANG_AS_LIB)
  set(LIVC_LIB_DIR ${LIVC_LIB_DIR} ${LIBCLANG_LIBRARY_DIR} ${LLVM_LIBRARY_DIR})

  set(LIBVC_LIBRARIES
      ${LIBVC_LIBRARIES} ${LIBCLANG_LIBRARIES} ${LLVM_MODULE_LIBS}
      ${LLVM_MODULE_LIBFILES} ${LLVM_SYSTEM})
endif(ENABLE_CLANG_AS_LIB)
if(USE_LIBTOOL)
  set(LIBVC_LIBRARIES ${LIBVC_LIBRARIES} ${Libtool_LIBRARY})
endif(USE_LIBTOOL)

list(REMOVE_DUPLICATES LIVC_LIB_DIR)

list(REMOVE_DUPLICATES LIBVC_LIBRARIES)

# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# Actions taken when all components have been found

if(LIBVC_INCLUDE_DIRS AND LIBVC_LIBRARIES)
  set(LIBVC_FOUND TRUE)
else(LIBVC_INCLUDE_DIRS AND LIBVC_LIBRARIES)
  if(LibVersioningCompiler_FIND_VERBOSE)
    if(NOT LIBVC_INCLUDE_DIRS)
      message(STATUS "Unable to find libVC header files!")
    endif(NOT LIBVC_INCLUDE_DIRS)
    if(NOT LIBVC_LIBRARIES)
      message(STATUS "Unable to find libVC library files!")
    endif(NOT LIBVC_LIBRARIES)
  endif(LibVersioningCompiler_FIND_VERBOSE)
endif(LIBVC_INCLUDE_DIRS AND LIBVC_LIBRARIES)

if(LIBVC_FOUND)
  if(LibVersioningCompiler_FIND_VERBOSE)
    message(STATUS "Found components for libVersioningCompiler")
    message(STATUS "LIBVC_INCLUDE_DIRS .... = ${LIBVC_INCLUDE_DIRS}")
    message(STATUS "LIBVC_LIBRARIES ... = ${LIBVC_LIBRARIES}")
  endif(LibVersioningCompiler_FIND_VERBOSE)
else(LIBVC_FOUND)
  if(LibVersioningCompiler_FIND_REQUIRED)
    message(FATAL_ERROR "Could not find libVersioningCompiler!")
  else(LibVersioningCompiler_FIND_REQUIRED)
    if(NOT LibVersioningCompiler_FIND_VERBOSE)
      message(WARNING "Could not find libVersioningCompiler!")
    endif(NOT LibVersioningCompiler_FIND_VERBOSE)
  endif(LibVersioningCompiler_FIND_REQUIRED)
endif(LIBVC_FOUND)

# set also standard cmake variable names
if(LIBVC_FOUND)
  set(LibVersioningCompiler_FOUND TRUE)
  set(LibVersioningCompiler_INCLUDE_DIRS ${LIBVC_INCLUDE_DIRS})
  set(LibVersioningCompiler_INCLUDES ${LIBVC_INCLUDE_DIRS})
  set(LibVersioningCompiler_LIBRARIES ${LIBVC_LIBRARIES})
  set(LibVersioningCompiler_LIBS ${LIBVC_LIBRARIES})
else(LIBVC_FOUND)
  set(LibVersioningCompiler_FOUND FALSE)
endif(LIBVC_FOUND)

mark_as_advanced(
  LIBVC_FOUND
  LIBVC_INCLUDE_DIRS
  LIBVC_LIBRARIES
  LIVC_LIB_DIR
  HAVE_CLANG_LIB_COMPILER
  LibVersioningCompiler_FOUND
  LibVersioningCompiler_INCLUDE_DIRS
  LibVersioningCompiler_INCLUDES
  LibVersioningCompiler_LIBRARIES
  LibVersioningCompiler_LIBS)
